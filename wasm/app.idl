type KeyringData = struct {
  address: str,
  encoded: str,
};

type KeyringEvent = enum {
  KeyringAccountSet,
  Error: KeyringError,
};

type KeyringError = enum {
  KeyringAddressAlreadyEsists,
  UserAddressAlreadyExists,
  UserCodedNameAlreadyExists,
  UserDoesNotHasKeyringAccount,
  KeyringAccountAlreadyExists,
  SessionHasInvalidCredentials,
  UserAndKeyringAddressAreTheSame,
};

type KeyringQueryEvent = enum {
  LastWhoCall: actor_id,
  SignlessAccountAddress: opt actor_id,
  SignlessAccountData: opt KeyringData,
};

type PingEvent = enum {
  Ping,
  Pong,
  KeyringError: KeyringError,
};

constructor {
  New : ();
};

service KeyringService {
  BindKeyringDataToUserAddress : (user_address: actor_id, keyring_data: KeyringData) -> KeyringEvent;
  BindKeyringDataToUserCodedName : (user_coded_name: str, keyring_data: KeyringData) -> KeyringEvent;
  query KeyringAccountData : (keyring_address: actor_id) -> KeyringQueryEvent;
  query KeyringAddressFromUserAddress : (user_address: actor_id) -> KeyringQueryEvent;
  query KeyringAddressFromUserCodedName : (user_coded_name: str) -> KeyringQueryEvent;
};

service Ping {
  Ping : () -> PingEvent;
  PingNoWallet : (user_coded_name: str) -> PingEvent;
  PingSignless : (user_address: actor_id) -> PingEvent;
  Pong : () -> PingEvent;
  PongNoWallet : (user_coded_name: str) -> PingEvent;
  PongSignless : (user_address: actor_id) -> PingEvent;
  query LastCaller : () -> actor_id;
};

