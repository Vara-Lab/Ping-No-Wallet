// Code generated by sails-client-gen. DO NOT EDIT.
#[allow(unused_imports)]
use sails_rs::collections::BTreeMap;
#[allow(unused_imports)]
use sails_rs::{
    calls::{Activation, Call, Query, Remoting, RemotingAction},
    prelude::*,
    String,
};
pub struct AppFactory<R> {
    #[allow(dead_code)]
    remoting: R,
}
impl<R> AppFactory<R> {
    #[allow(unused)]
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::AppFactory for AppFactory<R> {
    type Args = R::Args;
    fn new(&self) -> impl Activation<Args = R::Args> {
        RemotingAction::<_, app_factory::io::New>::new(self.remoting.clone(), ())
    }
}

pub mod app_factory {
    use super::*;
    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct New(());
        impl New {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <New as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for New {
            const ROUTE: &'static [u8] = &[12, 78, 101, 119];
            type Params = ();
            type Reply = ();
        }
    }
}
pub struct KeyringService<R> {
    remoting: R,
}
impl<R> KeyringService<R> {
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::KeyringService for KeyringService<R> {
    type Args = R::Args;
    fn bind_keyring_data_to_user_address(
        &mut self,
        user_address: ActorId,
        keyring_data: KeyringData,
    ) -> impl Call<Output = KeyringEvent, Args = R::Args> {
        RemotingAction::<_, keyring_service::io::BindKeyringDataToUserAddress>::new(
            self.remoting.clone(),
            (user_address, keyring_data),
        )
    }
    fn bind_keyring_data_to_user_coded_name(
        &mut self,
        user_coded_name: String,
        keyring_data: KeyringData,
    ) -> impl Call<Output = KeyringEvent, Args = R::Args> {
        RemotingAction::<_, keyring_service::io::BindKeyringDataToUserCodedName>::new(
            self.remoting.clone(),
            (user_coded_name, keyring_data),
        )
    }
    fn keyring_account_data(
        &self,
        keyring_address: ActorId,
    ) -> impl Query<Output = KeyringQueryEvent, Args = R::Args> {
        RemotingAction::<_, keyring_service::io::KeyringAccountData>::new(
            self.remoting.clone(),
            keyring_address,
        )
    }
    fn keyring_address_from_user_address(
        &self,
        user_address: ActorId,
    ) -> impl Query<Output = KeyringQueryEvent, Args = R::Args> {
        RemotingAction::<_, keyring_service::io::KeyringAddressFromUserAddress>::new(
            self.remoting.clone(),
            user_address,
        )
    }
    fn keyring_address_from_user_coded_name(
        &self,
        user_coded_name: String,
    ) -> impl Query<Output = KeyringQueryEvent, Args = R::Args> {
        RemotingAction::<_, keyring_service::io::KeyringAddressFromUserCodedName>::new(
            self.remoting.clone(),
            user_coded_name,
        )
    }
}

pub mod keyring_service {
    use super::*;

    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct BindKeyringDataToUserAddress(());
        impl BindKeyringDataToUserAddress {
            #[allow(dead_code)]
            pub fn encode_call(user_address: ActorId, keyring_data: super::KeyringData) -> Vec<u8> {
                <BindKeyringDataToUserAddress as ActionIo>::encode_call(&(
                    user_address,
                    keyring_data,
                ))
            }
        }
        impl ActionIo for BindKeyringDataToUserAddress {
            const ROUTE: &'static [u8] = &[
                56, 75, 101, 121, 114, 105, 110, 103, 83, 101, 114, 118, 105, 99, 101, 112, 66,
                105, 110, 100, 75, 101, 121, 114, 105, 110, 103, 68, 97, 116, 97, 84, 111, 85, 115,
                101, 114, 65, 100, 100, 114, 101, 115, 115,
            ];
            type Params = (ActorId, super::KeyringData);
            type Reply = super::KeyringEvent;
        }
        pub struct BindKeyringDataToUserCodedName(());
        impl BindKeyringDataToUserCodedName {
            #[allow(dead_code)]
            pub fn encode_call(
                user_coded_name: String,
                keyring_data: super::KeyringData,
            ) -> Vec<u8> {
                <BindKeyringDataToUserCodedName as ActionIo>::encode_call(&(
                    user_coded_name,
                    keyring_data,
                ))
            }
        }
        impl ActionIo for BindKeyringDataToUserCodedName {
            const ROUTE: &'static [u8] = &[
                56, 75, 101, 121, 114, 105, 110, 103, 83, 101, 114, 118, 105, 99, 101, 120, 66,
                105, 110, 100, 75, 101, 121, 114, 105, 110, 103, 68, 97, 116, 97, 84, 111, 85, 115,
                101, 114, 67, 111, 100, 101, 100, 78, 97, 109, 101,
            ];
            type Params = (String, super::KeyringData);
            type Reply = super::KeyringEvent;
        }
        pub struct KeyringAccountData(());
        impl KeyringAccountData {
            #[allow(dead_code)]
            pub fn encode_call(keyring_address: ActorId) -> Vec<u8> {
                <KeyringAccountData as ActionIo>::encode_call(&keyring_address)
            }
        }
        impl ActionIo for KeyringAccountData {
            const ROUTE: &'static [u8] = &[
                56, 75, 101, 121, 114, 105, 110, 103, 83, 101, 114, 118, 105, 99, 101, 72, 75, 101,
                121, 114, 105, 110, 103, 65, 99, 99, 111, 117, 110, 116, 68, 97, 116, 97,
            ];
            type Params = ActorId;
            type Reply = super::KeyringQueryEvent;
        }
        pub struct KeyringAddressFromUserAddress(());
        impl KeyringAddressFromUserAddress {
            #[allow(dead_code)]
            pub fn encode_call(user_address: ActorId) -> Vec<u8> {
                <KeyringAddressFromUserAddress as ActionIo>::encode_call(&user_address)
            }
        }
        impl ActionIo for KeyringAddressFromUserAddress {
            const ROUTE: &'static [u8] = &[
                56, 75, 101, 121, 114, 105, 110, 103, 83, 101, 114, 118, 105, 99, 101, 116, 75,
                101, 121, 114, 105, 110, 103, 65, 100, 100, 114, 101, 115, 115, 70, 114, 111, 109,
                85, 115, 101, 114, 65, 100, 100, 114, 101, 115, 115,
            ];
            type Params = ActorId;
            type Reply = super::KeyringQueryEvent;
        }
        pub struct KeyringAddressFromUserCodedName(());
        impl KeyringAddressFromUserCodedName {
            #[allow(dead_code)]
            pub fn encode_call(user_coded_name: String) -> Vec<u8> {
                <KeyringAddressFromUserCodedName as ActionIo>::encode_call(&user_coded_name)
            }
        }
        impl ActionIo for KeyringAddressFromUserCodedName {
            const ROUTE: &'static [u8] = &[
                56, 75, 101, 121, 114, 105, 110, 103, 83, 101, 114, 118, 105, 99, 101, 124, 75,
                101, 121, 114, 105, 110, 103, 65, 100, 100, 114, 101, 115, 115, 70, 114, 111, 109,
                85, 115, 101, 114, 67, 111, 100, 101, 100, 78, 97, 109, 101,
            ];
            type Params = String;
            type Reply = super::KeyringQueryEvent;
        }
    }
}
pub struct Ping<R> {
    remoting: R,
}
impl<R> Ping<R> {
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::Ping for Ping<R> {
    type Args = R::Args;
    fn ping(&mut self) -> impl Call<Output = PingEvent, Args = R::Args> {
        RemotingAction::<_, ping::io::Ping>::new(self.remoting.clone(), ())
    }
    fn ping_no_wallet(
        &mut self,
        user_coded_name: String,
    ) -> impl Call<Output = PingEvent, Args = R::Args> {
        RemotingAction::<_, ping::io::PingNoWallet>::new(self.remoting.clone(), user_coded_name)
    }
    fn ping_signless(
        &mut self,
        user_address: ActorId,
    ) -> impl Call<Output = PingEvent, Args = R::Args> {
        RemotingAction::<_, ping::io::PingSignless>::new(self.remoting.clone(), user_address)
    }
    fn pong(&mut self) -> impl Call<Output = PingEvent, Args = R::Args> {
        RemotingAction::<_, ping::io::Pong>::new(self.remoting.clone(), ())
    }
    fn pong_no_wallet(
        &mut self,
        user_coded_name: String,
    ) -> impl Call<Output = PingEvent, Args = R::Args> {
        RemotingAction::<_, ping::io::PongNoWallet>::new(self.remoting.clone(), user_coded_name)
    }
    fn pong_signless(
        &mut self,
        user_address: ActorId,
    ) -> impl Call<Output = PingEvent, Args = R::Args> {
        RemotingAction::<_, ping::io::PongSignless>::new(self.remoting.clone(), user_address)
    }
    fn last_caller(&self) -> impl Query<Output = ActorId, Args = R::Args> {
        RemotingAction::<_, ping::io::LastCaller>::new(self.remoting.clone(), ())
    }
}

pub mod ping {
    use super::*;

    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct Ping(());
        impl Ping {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <Ping as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for Ping {
            const ROUTE: &'static [u8] = &[16, 80, 105, 110, 103, 16, 80, 105, 110, 103];
            type Params = ();
            type Reply = super::PingEvent;
        }
        pub struct PingNoWallet(());
        impl PingNoWallet {
            #[allow(dead_code)]
            pub fn encode_call(user_coded_name: String) -> Vec<u8> {
                <PingNoWallet as ActionIo>::encode_call(&user_coded_name)
            }
        }
        impl ActionIo for PingNoWallet {
            const ROUTE: &'static [u8] = &[
                16, 80, 105, 110, 103, 48, 80, 105, 110, 103, 78, 111, 87, 97, 108, 108, 101, 116,
            ];
            type Params = String;
            type Reply = super::PingEvent;
        }
        pub struct PingSignless(());
        impl PingSignless {
            #[allow(dead_code)]
            pub fn encode_call(user_address: ActorId) -> Vec<u8> {
                <PingSignless as ActionIo>::encode_call(&user_address)
            }
        }
        impl ActionIo for PingSignless {
            const ROUTE: &'static [u8] = &[
                16, 80, 105, 110, 103, 48, 80, 105, 110, 103, 83, 105, 103, 110, 108, 101, 115, 115,
            ];
            type Params = ActorId;
            type Reply = super::PingEvent;
        }
        pub struct Pong(());
        impl Pong {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <Pong as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for Pong {
            const ROUTE: &'static [u8] = &[16, 80, 105, 110, 103, 16, 80, 111, 110, 103];
            type Params = ();
            type Reply = super::PingEvent;
        }
        pub struct PongNoWallet(());
        impl PongNoWallet {
            #[allow(dead_code)]
            pub fn encode_call(user_coded_name: String) -> Vec<u8> {
                <PongNoWallet as ActionIo>::encode_call(&user_coded_name)
            }
        }
        impl ActionIo for PongNoWallet {
            const ROUTE: &'static [u8] = &[
                16, 80, 105, 110, 103, 48, 80, 111, 110, 103, 78, 111, 87, 97, 108, 108, 101, 116,
            ];
            type Params = String;
            type Reply = super::PingEvent;
        }
        pub struct PongSignless(());
        impl PongSignless {
            #[allow(dead_code)]
            pub fn encode_call(user_address: ActorId) -> Vec<u8> {
                <PongSignless as ActionIo>::encode_call(&user_address)
            }
        }
        impl ActionIo for PongSignless {
            const ROUTE: &'static [u8] = &[
                16, 80, 105, 110, 103, 48, 80, 111, 110, 103, 83, 105, 103, 110, 108, 101, 115, 115,
            ];
            type Params = ActorId;
            type Reply = super::PingEvent;
        }
        pub struct LastCaller(());
        impl LastCaller {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <LastCaller as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for LastCaller {
            const ROUTE: &'static [u8] = &[
                16, 80, 105, 110, 103, 40, 76, 97, 115, 116, 67, 97, 108, 108, 101, 114,
            ];
            type Params = ();
            type Reply = ActorId;
        }
    }
}
#[derive(PartialEq, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub struct KeyringData {
    pub address: String,
    pub encoded: String,
}
#[derive(PartialEq, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub enum KeyringEvent {
    KeyringAccountSet,
    Error(KeyringError),
}
#[derive(PartialEq, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub enum KeyringError {
    KeyringAddressAlreadyEsists,
    UserAddressAlreadyExists,
    UserCodedNameAlreadyExists,
    UserDoesNotHasKeyringAccount,
    KeyringAccountAlreadyExists,
    SessionHasInvalidCredentials,
    UserAndKeyringAddressAreTheSame,
}
#[derive(PartialEq, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub enum KeyringQueryEvent {
    LastWhoCall(ActorId),
    SignlessAccountAddress(Option<ActorId>),
    SignlessAccountData(Option<KeyringData>),
}
#[derive(PartialEq, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub enum PingEvent {
    Ping,
    Pong,
    KeyringError(KeyringError),
}

pub mod traits {
    use super::*;
    #[allow(dead_code)]
    pub trait AppFactory {
        type Args;
        #[allow(clippy::new_ret_no_self)]
        #[allow(clippy::wrong_self_convention)]
        fn new(&self) -> impl Activation<Args = Self::Args>;
    }

    #[allow(clippy::type_complexity)]
    pub trait KeyringService {
        type Args;
        fn bind_keyring_data_to_user_address(
            &mut self,
            user_address: ActorId,
            keyring_data: KeyringData,
        ) -> impl Call<Output = KeyringEvent, Args = Self::Args>;
        fn bind_keyring_data_to_user_coded_name(
            &mut self,
            user_coded_name: String,
            keyring_data: KeyringData,
        ) -> impl Call<Output = KeyringEvent, Args = Self::Args>;
        fn keyring_account_data(
            &self,
            keyring_address: ActorId,
        ) -> impl Query<Output = KeyringQueryEvent, Args = Self::Args>;
        fn keyring_address_from_user_address(
            &self,
            user_address: ActorId,
        ) -> impl Query<Output = KeyringQueryEvent, Args = Self::Args>;
        fn keyring_address_from_user_coded_name(
            &self,
            user_coded_name: String,
        ) -> impl Query<Output = KeyringQueryEvent, Args = Self::Args>;
    }

    #[allow(clippy::type_complexity)]
    pub trait Ping {
        type Args;
        fn ping(&mut self) -> impl Call<Output = PingEvent, Args = Self::Args>;
        fn ping_no_wallet(
            &mut self,
            user_coded_name: String,
        ) -> impl Call<Output = PingEvent, Args = Self::Args>;
        fn ping_signless(
            &mut self,
            user_address: ActorId,
        ) -> impl Call<Output = PingEvent, Args = Self::Args>;
        fn pong(&mut self) -> impl Call<Output = PingEvent, Args = Self::Args>;
        fn pong_no_wallet(
            &mut self,
            user_coded_name: String,
        ) -> impl Call<Output = PingEvent, Args = Self::Args>;
        fn pong_signless(
            &mut self,
            user_address: ActorId,
        ) -> impl Call<Output = PingEvent, Args = Self::Args>;
        fn last_caller(&self) -> impl Query<Output = ActorId, Args = Self::Args>;
    }
}
